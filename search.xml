<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ElasticSearch + Kibana 安装</title>
      <link href="/2020/08/04/ElasticSearch%20+%20Kibana%20%E5%AE%89%E8%A3%85/"/>
      <url>/2020/08/04/ElasticSearch%20+%20Kibana%20%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>Linux 服务器一台</li><li>ElasticSearch 和 Kibana 安装包</li><li>大约十五分钟的时间</li></ul><p>安装包可以从官网下载，也可以从国内镜像站下载，下面提供华为云的镜像地址。</p><blockquote><p><em>注意：需要保证 ElasticSearch 和 Kibana 版本一致</em></p></blockquote><ul><li>官网 <a href="https://www.elastic.co/cn/start" target="_blank" rel="noopener">https://www.elastic.co/cn/start</a></li><li>镜像 <a href="https://mirrors.huaweicloud.com/" target="_blank" rel="noopener">https://mirrors.huaweicloud.com/</a></li></ul><p>演示下载的版本为目前最新版本 <em>7.8.0</em></p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/elastic</span><br><span class="line">cd ~/elastic</span><br><span class="line">wget https://mirrors.huaweicloud.com/elasticsearch/7.8.0/elasticsearch-7.8.0-linux-x86_64.tar.gz</span><br><span class="line">wget https://mirrors.huaweicloud.com/kibana/7.8.0/kibana-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><h2 id="安装-ElasticSearch"><a href="#安装-ElasticSearch" class="headerlink" title="安装 ElasticSearch"></a>安装 ElasticSearch</h2><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -C elasticsearch-7.8.0 -xzvf elasticsearch-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./elasticsearch-7.8.0/bin/elasticsearch</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:9200</span><br></pre></td></tr></table></figure><p>如果有返回集群信息即成功。</p><h2 id="安装-Kibana"><a href="#安装-Kibana" class="headerlink" title="安装 Kibana"></a>安装 Kibana</h2><h3 id="解压-1"><a href="#解压-1" class="headerlink" title="解压"></a>解压</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -C kibana-7.8.0 -xzvf 7.8.0/kibana-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>配置文件位于 <code>config/kibana.yml</code>。主要修改以下配置项：</p><p>服务端口</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#server.port:5601</span></span><br><span class="line"><span class="string">server.port:5601</span></span><br></pre></td></tr></table></figure><p>服务地址，默认为localhost，只允许本机访问，远程主机不能访问。<br>为了让远程主机访问，需要设为非回环地址，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server.host:0.0.0.0</span></span><br></pre></td></tr></table></figure><p>es集群地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">elasticsearch.url:</span> <span class="string">["http://localhost:9200"]</span></span><br></pre></td></tr></table></figure><h3 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./bin/kibana</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">后台启动</span></span><br><span class="line">./bin/kibana &amp;</span><br></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>浏览器访问 linux-ip:5601</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>安装和运行相对简单，官网文档完善，需要注意 ElasticSearch 和 Kibana 的版本需要要一致，Kibana 才能运行。<br>通过镜像下载可以节省大量时间。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.elastic.co/cn/start" target="_blank" rel="noopener">Elastic Stack 官网</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch 基本概念</title>
      <link href="/2020/08/01/ElasticSearch%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2020/08/01/ElasticSearch%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h4 id="Near-Realtime-NRT-近实时"><a href="#Near-Realtime-NRT-近实时" class="headerlink" title="Near Realtime (NRT)  近实时"></a>Near Realtime (NRT)  近实时</h4><p>​ES是一个近实时的搜索平台。文档从被索引到可以被查询会有轻微的延迟（大约1秒）</p><h4 id="Cluster-集群"><a href="#Cluster-集群" class="headerlink" title="Cluster  集群"></a>Cluster  集群</h4><p>一个集群是共同保存数据并提供联合索引、查询功能的一个或多个服务器（节点）。集群有一个唯一的名称，默认为 <em>elasticsearch</em> ，节点根据该名称加入集群。</p><h4 id="Node-节点"><a href="#Node-节点" class="headerlink" title="Node 节点"></a>Node 节点</h4><p>节点是集群中的单个服务器，参与保存数据、索引和查询。节点启动时有一个唯一的名称，默认为 <em>UUID</em> 。节点默认加入的集群是<em>elasticsearch</em>。</p><h4 id="Index-索引"><a href="#Index-索引" class="headerlink" title="Index 索引"></a>Index 索引</h4><p>索引是一批有着共性特征的文档的集合。每个索引都有个名字，且<strong>必须全小写</strong>。</p><h4 id="Type-类型"><a href="#Type-类型" class="headerlink" title="Type 类型"></a>Type 类型</h4><blockquote><p>​在新版本中被去除</p></blockquote><p>​类型是索引的一个逻辑分区，用于区分同一个索引下不同类型的文档。</p><h4 id="Document-文档"><a href="#Document-文档" class="headerlink" title="Document 文档"></a>Document 文档</h4><p>​一个文档是信息被索引的基本单位。一个文档物理上属于一个索引，也属于索引内的一个类型。</p><h4 id="分区和副本"><a href="#分区和副本" class="headerlink" title="分区和副本"></a>分区和副本</h4><p>​一个索引其实可以存储多到超过单个节点物理限制的数据。</p><p>​例如一个索引由10亿数据，占用约1TB的磁盘空间，单节点的容量可能没那么大，也可能导致查询速度变慢。</p><p>​问了解决这个问题，ElasticSearch提供了将索引分割成多个片的能力，称之为<code>Shards(分片)</code> 。创建索引的时候可以指定分片的数量。每个分片都能独立且具备全功能地部署在集群中的任意一个节点中。</p><p><code>分片</code>重要的两个主要原因：</p><ul><li>可以水平数据容量</li><li>可以分布式且并行操作来提供吞吐量</li></ul><p>​一个分片如何实现分布式的、其文档是如何汇合起来提供查询服务的机制完全有 ElasticSearch 管理，对用户是透明的。</p><p>​ 在网络环境中请求失败是随时可能发生的事情，一个<strong>故障转移</strong>的机制能很好地应对一个分片\节点因为某些原因掉线或消失的情况。为此，ElasticSearch 允许为索引的分片创建一个或多个副本，即<code>副本分片</code>,建成<code>副本</code>。</p><p><code>副本</code>重要的两个主要原因：</p><ul><li>在某个节点、分片宕机时提供高可用的能力。因此副本不会和原分片分配到同一个节点。</li><li>因为请求能再各个分片并行处理，所以能提高搜索的吞吐量</li></ul><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>​每个索引都能分割成多个分片。一个索引也可以被复制0或多次。索引一单被复制，就会有主分片和副本分片。</p><p>​分片和副本的数量可以在创建索引的时候指定。索引创建之后也可以随时修改副本数量。可以通过<code>_shrink</code>和<code>_split</code> API修改现有索引的分片数量，这不是一个小动作，所以最好在创建索引前规划好分片数量。</p><blockquote><p>默认情况下，每个索引会分配5个主分片，和一个副本。也就是说集群中至少要有两个节点，一个索引有5个主分片和五个副本分片，每个索引总共10分片</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM 笔记</title>
      <link href="/2020/08/01/JVM%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/08/01/JVM%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="运行时内存分区"><a href="#运行时内存分区" class="headerlink" title="运行时内存分区"></a>运行时内存分区</h2><ol><li><p>方法区</p><blockquote><p>线程共享。用来存储被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等。会抛出OME。</p></blockquote></li><li><p>虚拟机栈</p><blockquote><p>“栈” 指虚拟机栈中的局部变量表</p><p>局部变量表中存放编译器可知的 基础数据类型 、对象引用 、 returnAddress类型。其中long，double占两个slot（局部变量空间），其他一个。</p><p>会抛出StackOverflowError 和 OutOfMemoryError。</p><p>每个方法执行时都会创建一个<strong>栈帧</strong>，栈帧用于存放局部变量表、操作数栈、动态链接、方法出入口等信息。一个方法从调用到执行就对应着一个栈帧在虚拟机从入栈到出栈。</p></blockquote></li><li><p>本地方法栈</p><blockquote><p>与虚拟机栈相似，但虚拟机栈是为虚拟机执行java方法（字节码）服务，而本地方法栈是虚拟机使用Native方法服务。也会报 SOE，OME</p></blockquote></li><li><p>堆</p><blockquote><p>最大块。线程共享。唯一目的：存放对象实例。虚拟机启动时创建。垃圾收集器管理的主要区域。会抛出OME</p></blockquote></li><li><p>程序计数器</p><blockquote><p>小块，代码执行的行号指示器，线程私有，互不影响。为了切换进程后能恢复到正确的执行位置。唯一一个没有规定任何OME的区域</p></blockquote></li></ol><p>其中方法区和堆由是所有线程共享数据区，其他是线程隔离的。</p><hr><h2 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h2><h3 id="内存分配方法"><a href="#内存分配方法" class="headerlink" title="内存分配方法"></a>内存分配方法</h3><h4 id="指针碰撞"><a href="#指针碰撞" class="headerlink" title="指针碰撞"></a>指针碰撞</h4><pre><code>Java堆中内存规划绝对规整，已分配和未分配的空间各处一边，中间有一个指针作为分界。分配内存时将指针向未分配的空间移动与新对象大小相等的距离。</code></pre><h4 id="空闲列表"><a href="#空闲列表" class="headerlink" title="空闲列表"></a>空闲列表</h4><pre><code>Java堆中已分配和空闲的内存相互交错。虚拟机需要维护一个空间列表记录哪些内存块可用，分配时在列表上找一块足够大的空间划分给新对象，并更新列表。</code></pre><h3 id="内存分配方法考虑的问题"><a href="#内存分配方法考虑的问题" class="headerlink" title="内存分配方法考虑的问题"></a>内存分配方法考虑的问题</h3><h4 id="方法选择"><a href="#方法选择" class="headerlink" title="方法选择"></a>方法选择</h4><p>垃圾收集器是否有压缩整理功能决定Java堆是否规整，Java堆是否规整决定使用哪种分配方法。<br>因此带Compact过程的收集器，如Serial、ParNew 采用指针碰撞；使用基于Mark-Swap的如CMS时采用空闲列表。</p><h4 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h4><p>对象创建是非常频繁的动作，可能出现正给对象A分配内存，未来得及更新指针</p><h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p><a href="http://www.tianshouzhi.com/api/tutorials/jvm/70" target="_blank" rel="noopener">参考</a></p><ol><li><p>对象头（header）</p><p> 长度为32/64。32位 Hotspot 虚拟机中根据对象状态对象会有不同的存储格式。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Bit-format of an object header (most significant first, big endian layout below):</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  32 bits:</span><br><span class="line">&#x2F;&#x2F;  --------</span><br><span class="line">&#x2F;&#x2F;  hash:25 ------------&gt;| age:4    biased_lock:1 lock:2 (normal object)</span><br><span class="line">&#x2F;&#x2F;  JavaThread*:23 epoch:2 age:4    biased_lock:1 lock:2 (biased object)</span><br><span class="line">&#x2F;&#x2F;  size:32 ------------------------------------------&gt;| (CMS free block)</span><br><span class="line">&#x2F;&#x2F;  PromotedObject*:29 ----------&gt;| promo_bits:3 -----&gt;| (CMS promoted object)</span><br></pre></td></tr></table></figure></li><li><p>实例数据（instance data）</p></li><li><p>对其填充（padding）</p></li></ol><h2 id="对象定位"><a href="#对象定位" class="headerlink" title="对象定位"></a>对象定位</h2><p>使用对象时需要通过栈上的 reference 数据来操作对象</p><h3 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h3><p>reference 中存的是句柄地址，垃圾清理时频繁的对象移动只需要修改句柄中的实例数据的指针，不需要修改 reference</p><h3 id="直接地址"><a href="#直接地址" class="headerlink" title="直接地址"></a>直接地址</h3><p>reference 中存的是对象地址，快速，不需要经过句柄</p><h2 id="JVM-各个内存区域可能出现的内存溢出（OOM）问题"><a href="#JVM-各个内存区域可能出现的内存溢出（OOM）问题" class="headerlink" title="JVM 各个内存区域可能出现的内存溢出（OOM）问题"></a>JVM 各个内存区域可能出现的内存溢出（OOM）问题</h2><p>除了程序计数器都有可能出现OOM</p><ul><li><p>Java堆的内存溢出</p></li><li><p>本地方法栈、虚拟机栈出现的内存溢出和爆栈（stackOverFlow）</p></li><li><p>本地方法区和运行时常量池溢出</p></li><li><p>本机直接内存溢出</p></li></ul><hr><h2 id="垃圾收集器、内存分配策略"><a href="#垃圾收集器、内存分配策略" class="headerlink" title="垃圾收集器、内存分配策略"></a>垃圾收集器、内存分配策略</h2><p>考虑：</p><h3 id="哪些内存需要回收"><a href="#哪些内存需要回收" class="headerlink" title="哪些内存需要回收"></a>哪些内存需要回收</h3><p>程序计数器、本地方法栈、虚拟机栈随线程生、灭，编译期间基本已知每个栈帧分配多少内存。线程结束后自动回收。</p><p>Java堆和方法区则主要在运行时才知道哪些对象被创建，这部分内存的分配和回收都是动态的，垃圾回收是针对这部分。</p><h3 id="什么时候回收"><a href="#什么时候回收" class="headerlink" title="什么时候回收"></a>什么时候回收</h3><p>“死去”的对象。及不可能再被使用的对象。</p><h3 id="如何回收"><a href="#如何回收" class="headerlink" title="如何回收"></a>如何回收</h3><h4 id="引用计数方法"><a href="#引用计数方法" class="headerlink" title="引用计数方法"></a>引用计数方法</h4><h4 id="可达性分析"><a href="#可达性分析" class="headerlink" title="可达性分析"></a>可达性分析</h4><h5 id="可作为-GCRoots-的对象"><a href="#可作为-GCRoots-的对象" class="headerlink" title="可作为 GCRoots 的对象"></a>可作为 GCRoots 的对象</h5><ol><li>虚拟机栈中引用的对象</li><li>方法区中类静态属性应用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中 JNI（native 方法）引用的对象</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客搭建记录</title>
      <link href="/2020/08/01/hello-world/"/>
      <url>/2020/08/01/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>安装node.js并视情况配置镜像</p><ul><li><a href="http://nodejs.cn/" target="_blank" rel="noopener">node.js 下载镜像站</a></li><li><a href="https://cnpmjs.org/" target="_blank" rel="noopener">cnpm 淘宝镜像</a></li></ul><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="本地生成博客"><a href="#本地生成博客" class="headerlink" title="本地生成博客"></a>本地生成博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><h3 id="配置远程仓库"><a href="#配置远程仓库" class="headerlink" title="配置远程仓库"></a>配置远程仓库</h3><p>创建仓库后修改 hexo 的 <code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@***.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>如果报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure><p>执行下面命令后再部署试试<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>More info: </p><ul><li><a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></li><li><a href="https://www.v2ex.com/t/175940" target="_blank" rel="noopener">ERROR Deployer not found: git</a></li><li><a href="https://mp.weixin.qq.com/s/P_n-Vz3h3dZiZ1xNWKHeTg" target="_blank" rel="noopener">江南一点雨</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka重平衡导致消息丢失记录</title>
      <link href="/2020/07/22/Kafka%E9%87%8D%E5%B9%B3%E8%A1%A1%E5%AF%BC%E8%87%B4%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/07/22/Kafka%E9%87%8D%E5%B9%B3%E8%A1%A1%E5%AF%BC%E8%87%B4%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>接口接受请求后，创建 Kafka topic、创建该topic的消费者，同时，启动定时任务往该 topic 发送消息。出现消息丢失问题。</p><h2 id="kafka-使用"><a href="#kafka-使用" class="headerlink" title="kafka 使用"></a>kafka 使用</h2><p>创建的topic有两个分区，只有一个消费者时会出现消息丢失。</p><p>根据 《深入理解Kafka:核心设计与实践原理》介绍，创建新的消费者或者重平衡时如果找不到offset，就会根据配置项 <code>auto.offset.reset</code> 设置消费位置。<br>该配置默认为 <em>latest</em> 即分区的末尾。</p><p>在创建topic后，重平衡完成前，消息进入topic，重平衡后消费者将offset置为末尾，导致数据丢失。</p>]]></content>
      
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备忘</title>
      <link href="/2020/07/16/%E5%A4%87%E5%BF%98/"/>
      <url>/2020/07/16/%E5%A4%87%E5%BF%98/</url>
      
        <content type="html"><![CDATA[<ul><li><p>ElasticSearch 主节点选举机制</p></li><li><p>ElasticSearch 相似度算法</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 备忘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 主从同步及其导致延迟问题</title>
      <link href="/2020/07/09/Mysql-%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/"/>
      <url>/2020/07/09/Mysql-%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li><p>读写分离，降低主服务器压力</p></li><li><p>在从服务器进行备份，避免备份影响主库</p></li><li><p>主库出问题，可以切换到从库</p></li></ol><h3 id="延迟产生原理"><a href="#延迟产生原理" class="headerlink" title="延迟产生原理"></a>延迟产生原理</h3><p>通过 binlog，支持异步模式(async replication) 和半同步模式(semi-sync replication)。主库提供读写事务的能力，从库只能提供只读事务的能力。</p><p>master执行的更新事务通过binlog复制的方式传给slave，slave收到后写入relay log，然后重放事务，从而达到主从机事务一致的效果。</p><p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/4ee94e9fba3edb3cb456bb99c4043437.png" alt="异步模式主从复制示意图"></p><p>异步模式传送binlog后不等待结果就提交事务。可能因为网络问题能能传达给slave就提交了事务，存在丢失事务的风险。</p><p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/9881395459ca1614c95915725ac30cd1.png" alt="半同步模式主从复制示意图"></p><p>半同步模式等待salve返回的结果，master收到ack后才提交事务。master写入binlog后，传达给slave前发生故障，重启后master能恢复，但slave不能，导致事务不一致。</p><p>两种模式都不能保证主从之间事务完全一致，不满足一致性要求高的系统。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="业务上的解决方案"><a href="#业务上的解决方案" class="headerlink" title="业务上的解决方案"></a>业务上的解决方案</h4><ol><li><p>更新后，读取相关的动作默认到从库</p></li><li><p>利用缓存。插入、更新数据后新数据后放入缓存，获取时先从缓存取</p></li></ol><h4 id="技术上的解决方案"><a href="#技术上的解决方案" class="headerlink" title="技术上的解决方案"></a>技术上的解决方案</h4><ol><li>Group Replication</li><li>多主模式</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><p><a href="http://mysql.taobao.org/monthly/2017/08/01/" target="_blank" rel="noopener">Group Replication内核解析</a></p></li><li><p><a href="http://mysql.taobao.org/monthly/2018/01/02/" target="_blank" rel="noopener">MySQL内核对读写分离的支持</a></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 主从 </tag>
            
            <tag> 读写分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>步步高面试记录</title>
      <link href="/2020/07/08/%E6%AD%A5%E6%AD%A5%E9%AB%98%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/07/08/%E6%AD%A5%E6%AD%A5%E9%AB%98%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h3><ul><li>介绍一些概念</li><li>和Mysql区别</li><li>副本分片能不能单独提供服务</li><li>简述了索引\查询流程</li><li>项目中使用情况</li></ul><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><ul><li>介绍B+树(不同引擎的使用情况)</li><li>索引类型(哈希\B+树区别)</li><li>主从(读写分离)延迟 业务上有什么解决方案 (redis)</li><li>Mybatis 中dao层能不能有同名不同参数的方法(不能因为MapperStatement 唯一)</li></ul><h3 id="分布式定时任务"><a href="#分布式定时任务" class="headerlink" title="分布式定时任务"></a>分布式定时任务</h3><ul><li>市面上有什么开源框架</li><li>解决方案(服务指定实例执行)</li></ul><h3 id="Redis-重点"><a href="#Redis-重点" class="headerlink" title="Redis (重点)"></a>Redis <em>(重点)</em></h3><ul><li>单线程为什么这么快</li><li>超过了容量限制会有什么动作(淘汰机制)</li><li>说一下集群模式</li><li>哨兵模式</li><li>实现分布式锁需要注意什么</li><li>项目中有哪些使用</li><li>哪个版本开始支持Lua脚本</li></ul><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><ul><li>如何实现高吞吐量</li><li>营销系统为什么选用 kafka</li></ul><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><ul><li>营销系统为什么又用RabbitMq 又用Kafka (简述了各自用途)</li><li>介绍一下简历中提到 支持Mybatis plus 3的部分</li><li>讲一下最近做的一个系统(营销系统)</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>讲一下多路复用</li><li>多路复用在上面哪些框架有用到</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Kafka 没有复习到,只能回答项目的使用。没有提到Java和JVM，Spring相关的，面试重点在中间件。<br>其中Redis的部分有一些（单线程问题）看了但是记不起来，描述不清，有一些没看到（集群和哨兵）。</p><p>此次面试的准备时间约2天。许多细节还需记清楚，并且准备好如何描述。简历需要修改，去除没有技术含量的部分</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 RabbitMQ 的延迟队列实现</title>
      <link href="/2020/07/04/%E5%9F%BA%E4%BA%8E-RabbitMQ-%E7%9A%84%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/07/04/%E5%9F%BA%E4%BA%8E-RabbitMQ-%E7%9A%84%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
